profiles {
    pfr {
        process {
            executor            = 'slurm'
        }

        apptainer {
            envWhitelist        = 'APPTAINER_BINDPATH,APPTAINER_BIND'
            cacheDir            = "/workspace/pangene/singularity"
        }
    }

    local {
        process {
            executor            = 'local'
        }
    }

    conda {
        conda.enabled          = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        channels               = ['conda-forge', 'bioconda', 'defaults']
        apptainer.enabled      = false
    }
    mamba {
        conda.enabled          = true
        conda.useMamba         = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        apptainer.enabled      = false
    }
    docker {
        docker.enabled         = true
        conda.enabled          = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        apptainer.enabled      = false
        docker.runOptions      = '-u $(id -u):$(id -g)'
    }
    arm {
        docker.runOptions      = '-u $(id -u):$(id -g) --platform=linux/amd64'
    }
    singularity {
        singularity.enabled    = true
        singularity.autoMounts = true
        conda.enabled          = false
        docker.enabled         = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        apptainer.enabled      = false
    }
    apptainer {
        apptainer.enabled      = true
        apptainer.autoMounts   = true
        conda.enabled          = false
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
}

apptainer.registry              = 'quay.io'
docker.registry                 = 'quay.io'
podman.registry                 = 'quay.io'
singularity.registry            = 'quay.io'

process {

    cpus                        = { check_max( 1    * task.attempt, 'cpus'   ) }
    memory                      = { check_max( 6.GB * task.attempt, 'memory' ) }
    time                        = { check_max( 4.h  * task.attempt, 'time'   ) }

    errorStrategy               = { task.exitStatus in [140,143,137,104,134,139] ? 'retry' : 'finish' }
    maxRetries                  = 1
    maxErrors                   = '-1'

    withLabel:process_single {
        cpus                    = { check_max( 1                  , 'cpus'     ) }
        memory                  = { check_max( 6.GB * task.attempt, 'memory'   ) }
        time                    = { check_max( 4.h  * task.attempt, 'time'     ) }
    }
    withLabel:process_low {
        cpus                    = { check_max( 2     * task.attempt, 'cpus'    ) }
        memory                  = { check_max( 12.GB * task.attempt, 'memory'  ) }
        time                    = { check_max( 4.h   * task.attempt, 'time'    ) }
    }
    withLabel:process_medium {
        cpus                    = { check_max( 6     * task.attempt, 'cpus'    ) }
        memory                  = { check_max( 36.GB * task.attempt, 'memory'  ) }
        time                    = { check_max( 8.h   * task.attempt, 'time'    ) }
    }
    withLabel:process_high {
        cpus                    = { check_max( 12    * task.attempt, 'cpus'    ) }
        memory                  = { check_max( 72.GB * task.attempt, 'memory'  ) }
        time                    = { check_max( 16.h  * task.attempt, 'time'    ) }
    }
    withLabel:process_long {
        time                    = { check_max( 20.h  * task.attempt, 'time'    ) }
    }
    withLabel:process_high_memory {
        memory                  = { check_max( 200.GB * task.attempt, 'memory' ) }
    }

    withName:CUSTOM_DUMPSOFTWAREVERSIONS {
        cache = false
    }
}

nextflow {
    enable {
        moduleBinaries          = true
    }
}

// Capture exit codes from upstream processes when piping
process.shell                   = ['/bin/bash', '-euo', 'pipefail']

def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
